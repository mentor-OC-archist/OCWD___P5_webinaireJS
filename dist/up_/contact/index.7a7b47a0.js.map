{"mappings":"AAAA;;CAEC,GACD;;;;;;;;AAQA,GAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,GAIA;;;;;;;;;;;CAWC,GACD,QAAQ,gBAAgB,CAAC,UAAU,CAAC,IAAM;IACtC,+KAA+K;IAC/K,mBAAmB;IACnB,+BAA+B;IAC/B,sBAAsB;IACtB,qBAAqB;IACrB,MAAM,OAAO,EAAE,MAAM;IACrB,MAAM,UAAU;IAChB,IAAG,QAAQ,IAAI,CAAC,QAAQ,KAAK,GAAE;QAC3B,QAAQ,SAAS,CAAC,MAAM,CAAC;QACzB,QAAQ,SAAS,CAAC,GAAG,CAAC;QACtB,QAAQ,iBAAiB,CAAC;IAC9B,OAAK;QACD,QAAQ,SAAS,CAAC,MAAM,CAAC;QACzB,QAAQ,SAAS,CAAC,GAAG,CAAC;QACtB,QAAQ,iBAAiB,CAAC;IAC9B,CAAC;AACL;AAEA;;;;;;;;;;;;;;CAcC,GACD,KAAK,gBAAgB,CAAC,UAAU,CAAC,IAAM;IACnC,+KAA+K;IAC/K,mBAAmB;IACnB,+BAA+B;IAC/B,sBAAsB;IACtB,EAAE,cAAc;IAChB,MAAM,OAAO,EAAE,MAAM;IACrB,MAAM,SAAS;QAAC,OAAO,CAAC;IAAC;IAEzB,QAAQ,GAAG,CAAC,QAAQ,QAAQ;IAC5B,QAAQ,GAAG,CAAC,QAAQ,QAAQ,CAAC,KAAK;IAElC,IAAG,QAAQ,QAAQ,CAAC,KAAK,EAAC;QACtB,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,IAAI,SAAS;QACzB,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,SAAS,MAAM,OAAO;QACjD,MAAM,IAAI,CAAC,IAAI,SAAS,MAAM,OAAO,IAAI,OAAO,CAAC,CAAA,KAAI;YACjD,OAAO,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE;QAC/B;QACA,QAAQ,GAAG,CAAC;QAEZ,MAAM,qCAAqC;YACvC,QAAQ;YACR,SAAS;gBAAC,gBAAgB;YAAkB;YAC5C,MAAM,KAAK,SAAS,CAAC;QAEzB,GACK,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,IACtB,IAAI,CAAC,CAAA,OAAM;YACR,MAAM,KAAK,SAAS;YACpB,SAAS,IAAI,GAAC;QAClB,GACC,KAAK,CAAC,CAAA,QAAO;YAAC,QAAQ,KAAK,CAAC,mDAAmD;QAAM,GACrF,OAAO,CAAC,IAAI;YAAC,QAAQ,IAAI,CAAC;QAAgB;IACnD,CAAO;AACX","sources":["frontend/view/contact/index.js"],"sourcesContent":["/**\n * Gère l'affichage et les interactions de la page de contact\n */\n/*\ntextarea: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea\nConstraint validation: https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation\nattribut pattern: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern\nsetcustomvalidity: https://www.w3schools.com/js/js_validation_api.asp\nlearn regex: https://regexone.com/\ntext2regex: https://www.autoregex.xyz/\nregex2text: https://www.browserling.com/tools/text-from-regex\n*/\n\n/*\npour tous les input et textarea, rajouter un \"id\", et compléter par un attribut \"for\" les balises label associées \npour tous les input et textarea, rajouter un attribut \"required\"\npour tous les input et textarea, rajouter un attribut \"placeholder\"\npour l'input \"noms\", rajouter un title \n\npour tous les input, en css rajouter des regles css, via les pseudo-formats \":valid\", \":invalid\", et \":placeholder-shown\"\npour le textarea, en css rajouter dans les sélecteurs des règles précédentes un cas pour le textarea mais avec un nom de classe plutot que les pseudo-formats\n\npour l'input \"noms\", rajouter un attribut \"pattern\", et y mettre une regex que vous créerez pour vérifier \"contient au moins 2 mots, dont le 1er est en majuscule et le 2nd est Capitalisé, séparés par une virgule suivi d'un espace: 'TEST, Prenom'\"\npour l'input \"message\", rajouter deux attributs \"minlength\" et \"maxlength\" aux valeurs respectives 10 et 5000 sur message\nOPTION A) pour l'input \"age\", créer une regex pour vérifier \"compris entre 18 et 120\", et placer la dans un attribut pattern, puis rajouter un title décrivant cette regex\nOPTION B) pour l'input \"age\", rajouter deux attribut \"min\" et \"max\"\n\nimporter \"index.js\" dans \"index.html\" avec l'attribut \"defer\"\n\nenfin, utiliser des outils de bundler, comme webpack ou parcel pour ...bundler votre application (càd l'optimiser grâce à ces outils)\n    avec webpack:\n        installer toutes les dépendances npm\n            npm install --save-dev webpack webpack-cli babel-loader @babel/core @babel/preset-env babel-polyfill\n        créer un fichier webpack.config.js à la racine de votre projet,\n        le remplir avec les informations présentés dans le cours, ou sur la documentation de webpack\n            https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577766-compilez-et-executez-votre-code\n            https://webpack.js.org/guides/getting-started/\n        puis lancer la commande: npx webpack (à la racine du projet)\n        puis ouvrir une page sur le browser à l'adresse du localhost indiqué\n    avec parcel:\n        lancer juste la commande: npx parcel frontend/view/home/index.html\n        puis ouvrir une page sur le browser à l'adresse: http://localhost:1234\n\n*/\n\n\n\n/**\n * puis pour l'input \"message\", rajouter un event \"change\", dedans: \n    créer une variable contenant une regex pour \"ne contient aucun caractère spéciaux\"\n    tester la regex sur la \"value\" du textarea \"message\": \n        si la réponse est false: \n            rajouter lui une classe d'échec via classList (et lui enlever toute autre classe de validation)\n            et utiliser la methode DOM .setCustomValidity(\"message d'erreur\") sur le textarea \"message\"\n        si la réponse est true\n            rajouter lui une class de succès via classList (et lui enlever toute autre classe de validation)\n            et utiliser la methode DOM .setCustomValidity(\"\") sur le textarea \"message\" pour annuler l'erreur (potentiellement déclenchée en cas d'un 1er false)\n\n */\nmessage.addEventListener(\"change\", (e) => {\n    // bubbles,cancelBubble,cancelable,composed,currentTarget,deepPath,defaultPrevented,eventPhase,explicitOriginalTarget,originalTarget,srcElement,target,timeStamp,type,isTrusted\n    // e.composedPath()\n    // e.stopImmediatePropagation()\n    // e.stopPropagation()\n    // e.preventDefault()\n    const elem = e.target\n    const reError = /^[a-zA-Z0-9 \\-'\"àçéè!?,;:]{10,}$/\n    if(reError.test(message.value)){\n        message.classList.remove('invalid')\n        message.classList.add('valid')\n        message.setCustomValidity(\"\")\n    }else{\n        message.classList.remove('valid')\n        message.classList.add('invalid')\n        message.setCustomValidity(\"SVP Veuillez entrer un message ne contenant aucun caractère spécial, et dans une longueur comprise entre10 et 5000 caractères\")\n    }\n})\n\n/**\n * pour le formulaire, rajouter un event \"submit\", dedans: \n    enlever le comportement par défaut du formulaire\n    créer une variable contenant un objet, dans lequel vous créez une(1) clé \"datas\" étant un objet  pour l'instant vide\n\n    faite un log de la l'objet DOM validity sur le textarea \"message\", puis de sa propriété DOM validity.valid\n\n    si validity.valid est true, rediriger la page vers google xD\n        récupérer toutes les valeurs du formulaire, pour les insérer à la clé \"datas\" de l'objet créé précédement\n            chaque valeur d'input associée à la valeur de l'attribut \"name\" de cette l'input\n        puis, fetcher ces données en POST vers le endpoint \"/api/contact\"\n            à la reception de la réponse du serveur(le backend) de cette requête, afficher dans un alert() le message de confirmation reçu (clé \"confirmID\"), ou le message d'erreur reçu (clé \"message\")'\n    sinon ....ne rien faire\n\n */\nform.addEventListener(\"submit\", (e) => {\n    // bubbles,cancelBubble,cancelable,composed,currentTarget,deepPath,defaultPrevented,eventPhase,explicitOriginalTarget,originalTarget,srcElement,target,timeStamp,type,isTrusted\n    // e.composedPath()\n    // e.stopImmediatePropagation()\n    // e.stopPropagation()\n    e.preventDefault()\n    const elem = e.target\n    const toSend = {datas: {}}\n\n    console.log(message.validity);\n    console.log(message.validity.valid);\n    \n    if(message.validity.valid){\n        console.log(form);\n        console.log(new FormData(form));\n        console.log(Array.from(new FormData(form).entries()));\n        Array.from(new FormData(form).entries()).forEach(el=>{\n            toSend.datas[el[0]] = el[1]\n        })\n        console.log(toSend);\n        \n        fetch(\"http://localhost:4000/api/contact\", {\n            method: \"POST\",\n            headers: {\"Content-type\": \"application/json\"},\n            body: JSON.stringify(toSend)\n            //...\n        })\n            .then((resp)=>resp.json())\n            .then(data=>{\n                alert(data.confirmID)\n                location.href=\"https://google.com\"\n            })\n            .catch(error=>{console.error(\"/*PUT YOUR CODE HERE IN CASE OF !!!FAILURE!!!*/\", error)})\n            .finally(()=>{console.warn(\"FINAL MESSAGE\")})\n    }else{}\n})\n\n\n"],"names":[],"version":3,"file":"index.7a7b47a0.js.map","sourceRoot":"/__parcel_source_root/"}